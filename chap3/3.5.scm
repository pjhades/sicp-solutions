(define (random-in-range low high)
  (let ((range (- high low)))
    (+ -1.0 (* range (random))))) ;here we generate decimals in (0,1)

(define (estimate-integral predicate x1 x2 y1 y2 trials)
  (define (test)
    (predicate (random-in-range x1 x2)
               (random-in-range y1 y2)))
  (* (* (- x2 x1) (- y2 y1))
     (monte-carlo trials test)))

(define (estimate-pi trials)
  (define (p x y)
    (<= (+ (sqr x) (sqr y)) 1.0))
  (estimate-integral p -1 1 -1 1 trials))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0) 
           (/ trials-passed trials))
          ((experiment) 
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))